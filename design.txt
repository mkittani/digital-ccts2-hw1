library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity asm is
    port(clk,reset,s    :in std_logic;
         X              : in std_logic_vector(7 downto 0);
         Sqrt           : out std_logic_vector(7 downto 0));
end;
architecture test of asm is
    type state_type is(s0,s1,s2,s3,s4);
    signal current_state, next_state :state_type;
    signal a,q,d	: std_logic_vector (7 downto 0);
begin
    process(current_state,s,q,d)
    begin
        case current_state is
            when s0=>    if s='0' then
                            next_state<=s0;
                        else 
                            next_state<=s1;
                        end if;
            when s1=> next_state<=s2;
            when s2=> if(q>a) then
                          next_state<=s3;
                      else
                          next_state<=s1;
                      end if;
            when s3=> next_state<=s4;
            when s4=> next_state<=s0;
        end case;
    end process;

  process(clk,current_state,s,q,d)
    begin
        if (clk'event and clk='1') then
        case current_state is
            when s0 =>
            	if(s='1') then
					a <= x;
                    q <= "00000001";
                    d <= "00000011";
				else null;
                end if;
            when s1 =>
                q <= q + d;

            when s2 =>
                d <= d + 2;

            when s3 =>
                d <= d srl 1;

            when s4 =>
                sqrt <= d - 1;
        end case;
        end if;
    end process;

    process(clk,reset)
    begin
        if (reset='0') then
            current_state<=s0;
        elsif(clk'event and clk='1') then
            current_state<=next_state;
        end if;
    end process;

    END;